# query totalSupply() {
#
# }

# query balanceOf(owner:) {
#
# }

# query getAavegotchi(tokenId: $tokenId) {
#
# }

# query aavegotchiClaimTime(tokenId: $tokenId) {
#
# }

# query tokenByIndex(index: $index) {
#   aavegotchi(tokenId:)
# }

# query tokenOfOwnerByIndex(owne) {
#
# }

# query tokenIdsOfOwner(owner: $owner) {
#   aavegotchis(where {
#     owner: $owner
#   }) { }
# }

# query allAavegotchisOfOwner(address: owner) {
#
}

    function allAavegotchisOfOwner(address _owner) external view returns (AavegotchiInfo[] memory aavegotchiInfos_) {
    function ownerOf(uint256 _tokenId) external view returns (address owner_) {
    function getApproved(uint256 _tokenId) external view returns (address approved_) {
    function isApprovedForAll(address _owner, address _operator) external view returns (bool approved_) {
    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function
    function safeTransferFrom(
    /// @dev This works identically to the other function with an extra data parameter,
    ///  except this function just sets data to "".
    function safeTransferFrom(
    function transferFrom(
    // This function is used by transfer functions
    function internalTransferFrom(
    function approve(address _approved, uint256 _tokenId) external {
    function setApprovalForAll(address _operator, bool _approved) external {
    function name() external view returns (string memory) {
    function symbol() external view returns (string memory) {
    function tokenURI(uint256 _tokenId) external pure returns (string memory) {
